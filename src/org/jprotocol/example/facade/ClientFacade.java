package org.jprotocol.example.facade;
import org.jprotocol.example.api.RequestAPIFactory;
import org.jprotocol.example.api.ResponseAPIFactory;
import org.jprotocol.example.handler.ClientHandlerHierarchyWithMockery;
import org.jprotocol.example.handler.ServerHandlerHierarchyWithMockery;
import org.jprotocol.framework.facade.AbstractClientFacade;
import org.jprotocol.framework.handler.Handler.Type;
import org.jprotocol.framework.handler.IFlushable;
import org.jprotocol.framework.logger.IProtocolLogger;
import org.jprotocol.framework.logger.ProtocolLogger;
import org.jprotocol.framework.test.ProtocolMockery;
/**
* This class is generated by DefaultFacadeGenerator.groovy
* @author eliasa01
*/
public class ClientFacade extends AbstractClientFacade {
    private final ClientHandlerHierarchyWithMockery hierarchy;
    private final RequestAPIFactory requestFactory;
    private final ResponseAPIFactory responseFactory;
    public ClientFacade(IFlushable flushable) {
        this(flushable, new ProtocolLogger());
    }
    public ClientFacade(IFlushable flushable, IProtocolLogger logger) {
        super(flushable, Type.Client, logger);
        requestFactory = new RequestAPIFactory();
        responseFactory = new ResponseAPIFactory();
        hierarchy = createHierarchy();
    }
    /**
    * Override to provide specialized implementation
    */
    protected ClientHandlerHierarchyWithMockery createHierarchy() {
        return new ClientHandlerHierarchyWithMockery(flushable, logger);
    }
    public RequestAPIFactory requests() {
        return requestFactory;
    }
    public ResponseAPIFactory responses() {
        return responseFactory;
    }
    @Override protected ProtocolMockery getMockery() {
        return hierarchy.mockery;
    }
    @Override public void receive(byte[] data) {
        hierarchy.receive(data);
    }
}
