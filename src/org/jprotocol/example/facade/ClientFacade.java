package org.jprotocol.example.facade;
import org.jprotocol.framework.test.ProtocolMockery;
import org.jprotocol.example.api.*;
import org.jprotocol.framework.handler.Handler.Type;
import org.jprotocol.framework.handler.*;
import org.jprotocol.framework.facade.*;
import org.jprotocol.framework.logger.*;
import org.jprotocol.example.dsl.ClientHandlerHierarchy;
/**
* This class is generated by DefaultFacadeGenerator.groovy
* @author Anders Eliasson
*/
public class ClientFacade extends AbstractClientFacade {
    private final AbstractHandlerHierarchy hierarchy;
    private final RequestAPIFactory requestFactory;
    private final ResponseAPIFactory responseFactory;
    private ProtocolMockery mockery;
    public ClientFacade(IFlushable flushable) {
        this(flushable, new ProtocolLogger(Type.Client));
    }
    public ClientFacade(IFlushable flushable, IProtocolLogger logger) {
        super(flushable, Type.Client, logger);
        requestFactory = new RequestAPIFactory();
        responseFactory = new ResponseAPIFactory();
        hierarchy = createHierarchy();
    }
    /**
    * Override to provide specialized implementation
    */
    protected AbstractHandlerHierarchy createHierarchy() {
        ProtocolSnifferProxy psp = new ProtocolSnifferProxy();
        ClientHandlerHierarchy chh = new ClientHandlerHierarchy(flushable, new ProtocolState(), psp, logger);
        this.mockery = new ProtocolMockery(chh.getRoot(), logger, true);
        psp.init(mockery);
        return chh;
    }
    public RequestAPIFactory requests() {
        return requestFactory;
    }
    public ResponseAPIFactory responses() {
        return responseFactory;
    }
    @Override protected ProtocolMockery getMockery() {
        return mockery;
    }
    @Override public void receive(byte[] data) {
        hierarchy.receive(data);
    }
}
